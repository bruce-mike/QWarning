; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --debug -c --asm -o.\objs\misc.o --depend=.\objs\misc.d --apcs=interwork -Otime --diag_suppress=9931 -IC:\Keil\ARM\INC\Phillips -I..\SharedCode -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --enum_is_int --omf_browse=.\objs\misc.crf misc.c]
        ARM
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

        REQUIRE _printf_percent
        REQUIRE _printf_d
        REQUIRE _printf_int_dec
getModeSelect PROC
        MOV      r0,#0x40000000
        SUB      r0,r0,#0x4000
        LDR      r0,[r0,#0x34]
        LSL      r0,r0,#9
        LSR      r0,r0,#28
        EOR      r0,r0,#0xf
        BX       lr
        ENDP

getBoardRev PROC
        MOV      r0,#0x40000000
        SUB      r0,r0,#0x4000
        LDR      r0,[r0,#0x34]
        LSL      r0,r0,#2
        LSR      r0,r0,#29
        BX       lr
        ENDP

ledsDoWork PROC
        LDR      r0,|L1.1456|
        LDR      r0,[r0,#4]  ; flashingLedState
        BX       r0
        ENDP

ledNopState PROC
|L1.64|
        BX       lr
        ENDP

setRedLED PROC
        MOV      r1,#0x40000000
        CMP      r0,#0
        MOV      r2,#0x8000
        SUB      r1,r1,#0x4000
        STRNE    r2,[r1,#0x3c]
        STREQ    r2,[r1,#0x38]
        BX       lr
        ENDP

setDryOut0 PROC
        LDR      r1,|L1.1456|
        CMP      r0,#0
        STRB     r0,[r1,#0]  ; dryOut0
        MOV      r1,#0x40000000
        MOV      r3,#0x20000000
        SUB      r1,r1,#0x4000
        MOV      r2,#0x8000
        STRNE    r3,[r1,#0x9c]
        STREQ    r3,[r1,#0x98]
        STRNE    r2,[r1,#0x3c]
        STREQ    r2,[r1,#0x38]
        BX       lr
        ENDP

getDryOut0 PROC
        LDR      r0,|L1.1456|
        LDRB     r0,[r0,#0]  ; dryOut0
        BX       lr
        ENDP

setDryOut1 PROC
        MOV      r1,#0x40000000
        CMP      r0,#0
        MOV      r2,#0x10000000
        SUB      r1,r1,#0x4000
        STRNE    r2,[r1,#0x9c]
        STREQ    r2,[r1,#0x98]
        BX       lr
        ENDP

setYellowLED PROC
        MOV      r1,#0x40000000
        CMP      r0,#0
        MOV      r2,#0x10000
        SUB      r1,r1,#0x4000
        STRNE    r2,[r1,#0x3c]
        STREQ    r2,[r1,#0x38]
        BX       lr
        ENDP

setAuxLED0 PROC
        PUSH     {r4}
        LDR      r4,|L1.1456|
        ADR      r12,|L1.64|
        MOV      r1,#0x40000000
        CMP      r0,#0
        MOV      r2,#2
        SUB      r1,r1,#0x4000
        STR      r12,[r4,#4]  ; flashingLedState
        MOV      r3,#0x10000
        STRNE    r2,[r1,#0x58]
        STREQ    r2,[r1,#0x5c]
        STRNE    r3,[r1,#0x3c]
        STREQ    r3,[r1,#0x38]
        POP      {r4}
        BX       lr
        ENDP

toggleYellowLED PROC
        MOV      r0,#0x40000000
        SUB      r0,r0,#0x4000
        LDR      r1,[r0,#0x34]
        TST      r1,#0x10000
        MOV      r1,#0x10000
        STRNE    r1,[r0,#0x3c]
        STREQ    r1,[r0,#0x38]
        BX       lr
        ENDP

flashAuxLED0 PROC
        PUSH     {r4,lr}
        LDR      r4,|L1.1456|
        MOV      r1,#0x1f4
        LDR      r0,[r4,#8]  ; toggleTimeStamp
        BL       hasTimedOut
        CMP      r0,#0
        POPEQ    {r4,lr}
        BXEQ     lr
        MOV      r0,#0x40000000
        SUB      r0,r0,#0x4000
        LDR      r1,[r0,#0x54]
        TST      r1,#2
        MOV      r1,#2
        STREQ    r1,[r0,#0x58]
        STRNE    r1,[r0,#0x5c]
        LDR      r1,[r0,#0x34]
        TST      r1,#0x10000
        MOV      r1,#0x10000
        STRNE    r1,[r0,#0x3c]
        STREQ    r1,[r0,#0x38]
        BL       getTimeNow
        STR      r0,[r4,#8]  ; toggleTimeStamp
        LDR      r0,[r4,#0xc]  ; toggleTime
        SUBS     r0,r0,#1
        STR      r0,[r4,#0xc]  ; toggleTime
        POPNE    {r4,lr}
        BXNE     lr
        MOV      r0,#0
        BL       setAuxLED0
        ADR      r0,|L1.64|
        STR      r0,[r4,#4]  ; flashingLedState
        POP      {r4,lr}
        BX       lr
        ENDP

flashAuxLED0NTimes PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r0,#1
        BL       setAuxLED0
        ORR      r0,r4,#1
        LDR      r4,|L1.1456|
        STR      r0,[r4,#0xc]  ; toggleTime
        BL       getTimeNow
        STR      r0,[r4,#8]  ; toggleTimeStamp
        LDR      r0,|L1.1460|
        STR      r0,[r4,#4]  ; flashingLedState
        POP      {r4,lr}
        BX       lr
        ENDP

perodicToggleAuxLED0State PROC
        PUSH     {r4,lr}
        LDR      r4,|L1.1456|
        ADD      r1,r4,#8
        LDM      r1,{r0,r1}  ; toggleTime, toggleTimeStamp
        BL       hasTimedOut
        CMP      r0,#0
        POPEQ    {r4,lr}
        BXEQ     lr
        MOV      r0,#0x40000000
        SUB      r0,r0,#0x4000
        LDR      r1,[r0,#0x54]
        TST      r1,#2
        MOV      r1,#2
        STREQ    r1,[r0,#0x58]
        STRNE    r1,[r0,#0x5c]
        LDR      r1,[r0,#0x34]
        TST      r1,#0x10000
        MOV      r1,#0x10000
        STRNE    r1,[r0,#0x3c]
        STREQ    r1,[r0,#0x38]
        BL       getTimeNow
        STR      r0,[r4,#8]  ; toggleTimeStamp
        POP      {r4,lr}
        BX       lr
        ENDP

setPeriodicAuxLED0 PROC
        CMP      r0,#2
        BXCC     lr
        PUSH     {r4,lr}
        MOV      r4,r0
        BL       getTimeNow
        MOV      r1,r0
        LDR      r0,|L1.1456|
        STR      r1,[r0,#8]  ; toggleTimeStamp
        LSR      r1,r4,#1
        STR      r1,[r0,#0xc]  ; toggleTime
        LDR      r1,|L1.1464|
        STR      r1,[r0,#4]  ; flashingLedState
        POP      {r4,lr}
        BX       lr
        ENDP

setGreenLED PROC
        MOV      r1,#0x40000000
        CMP      r0,#0
        MOV      r2,#0x20000
        SUB      r1,r1,#0x4000
        STRNE    r2,[r1,#0x3c]
        STREQ    r2,[r1,#0x38]
        BX       lr
        ENDP

toggleGreenLED PROC
        MOV      r0,#0x40000000
        SUB      r0,r0,#0x4000
        LDR      r1,[r0,#0x34]
        TST      r1,#0x20000
        MOV      r1,#0x20000
        STRNE    r1,[r0,#0x3c]
        STREQ    r1,[r0,#0x38]
        BX       lr
        ENDP

toggleRedLED PROC
        MOV      r0,#0x40000000
        SUB      r0,r0,#0x4000
        LDR      r1,[r0,#0x34]
        TST      r1,#0x8000
        MOV      r1,#0x8000
        STRNE    r1,[r0,#0x3c]
        STREQ    r1,[r0,#0x38]
        BX       lr
        ENDP

setHighUltraSonicTrigger PROC
        MOV      r1,#0x40000000
        MOV      r0,#0x100
        SUB      r1,r1,#0x4000
        STR      r0,[r1,#0x38]
        BX       lr
        ENDP

setLowUltraSonicTrigger PROC
        MOV      r1,#0x40000000
        MOV      r0,#0x100
        SUB      r1,r1,#0x4000
        STR      r0,[r1,#0x3c]
        BX       lr
        ENDP

startUpUltraSonicTrigger PROC
        PUSH     {r4-r6,lr}
        BL       getTimeNow
        MOV      r5,#0x40000000
        MOV      r4,#0x100
        SUB      r5,r5,#0x4000
        MOV      r6,r0
        STR      r4,[r5,#0x38]
|L1.800|
        MOV      r1,#0xc8
        MOV      r0,r6
        BL       hasTimedOut
        CMP      r0,#0
        BEQ      |L1.800|
        STR      r4,[r5,#0x3c]
        BL       getTimeNow
        MOV      r4,r0
|L1.832|
        MOV      r1,#5
        MOV      r0,r4
        BL       hasTimedOut
        CMP      r0,#0
        BEQ      |L1.832|
        POP      {r4-r6,lr}
        BX       lr
        ENDP

disableWriteProtection PROC
        MOV      r1,#0x40000000
        MOV      r0,#1
        SUB      r1,r1,#0x4000
        STR      r0,[r1,#0x58]
        BX       lr
        ENDP

enableWriteProtection PROC
        MOV      r1,#0x40000000
        MOV      r0,#1
        SUB      r1,r1,#0x4000
        STR      r0,[r1,#0x5c]
        BX       lr
        ENDP

setFramChipSelectHigh PROC
        MOV      r1,#0x40000000
        MOV      r0,#0x40
        SUB      r1,r1,#0x4000
        STR      r0,[r1,#0x18]
        BX       lr
        ENDP

setFramChipSelectLow PROC
        MOV      r1,#0x40000000
        MOV      r0,#0x40
        SUB      r1,r1,#0x4000
        STR      r0,[r1,#0x1c]
        BX       lr
        ENDP

setFramSystemPairedBit PROC
        PUSH     {r3,lr}
        MOV      r2,#2
        MOV      r1,sp
        MOV      r0,#0x22
        BL       readFramData
        MOV      r2,#2
        MOV      r1,sp
        MOV      r0,#0x22
        BL       writeFramData
        POP      {r3,lr}
        BX       lr
        ENDP

haveBeenPaired PROC
        PUSH     {r3,lr}
        MOV      r2,#2
        MOV      r1,sp
        MOV      r0,#0x22
        BL       readFramData
        LDRH     r0,[sp,#0]
        POP      {r3,lr}
        MOV      r1,#1
        BIC      r0,r1,r0
        BX       lr
        ENDP

setFramSystemLoggingTime PROC
        PUSH     {r0,lr}
        MOV      r2,#1
        MOV      r1,sp
        MOV      r0,#0x24
        BL       writeFramData
        POP      {r3,lr}
        BX       lr
        ENDP

getFramLoggingSampleTime PROC
        PUSH     {r3,lr}
        MOV      r2,#1
        MOV      r1,sp
        MOV      r0,#0x24
        BL       readFramData
        LDRB     r0,[sp,#0]
        POP      {r3,lr}
        BX       lr
        ENDP

setFactoryDefaults PROC
        PUSH     {r4,r5,lr}
        SUB      sp,sp,#0x14
        ADR      r0,|L1.1468|
        BL       __2printf
        MOV      r0,#0x18
        STRB     r0,[sp,#0]
        MOV      r2,#1
        MOV      r1,sp
        MOV      r0,#0x20
        BL       writeFramData
        MOV      r0,#0x82
        STRB     r0,[sp,#0]
        MOV      r2,#1
        MOV      r1,sp
        MOV      r0,#0x21
        BL       writeFramData
        MOV      r0,#3
        STRB     r0,[sp,#4]
        MOV      r2,#1
        ADD      r1,sp,#4
        MOV      r0,#0x25
        BL       writeFramData
        MOV      r4,#0xa60
        ADD      r4,r4,#0xe000
        MOV      r2,#4
        ADD      r1,sp,#8
        MOV      r0,#0x26
        STR      r4,[sp,#8]
        BL       writeFramData
        MOV      r2,#4
        ADD      r1,sp,#0xc
        MOV      r0,#0x2a
        STR      r4,[sp,#0xc]
        BL       writeFramData
        MOV      r4,#0
        MOV      r2,#1
        MOV      r1,sp
        MOV      r0,#0x20
        STRB     r4,[sp,#0]
        BL       readFramData
        LDRB     r1,[sp,#0]
        AND      r0,r1,#3
        ADD      r2,r0,r0,LSL #3
        ADD      r2,r2,r0,LSL #4
        LSR      r1,r1,#2
        ADR      r0,|L1.1500|
        BL       __2printf
        MOV      r2,#1
        MOV      r1,sp
        MOV      r0,#0x21
        STRB     r4,[sp,#0]
        BL       readFramData
        LDRB     r1,[sp,#0]
        AND      r0,r1,#3
        ADD      r2,r0,r0,LSL #3
        ADD      r2,r2,r0,LSL #4
        LSR      r1,r1,#2
        ADR      r0,|L1.1536|
        BL       __2printf
        MOV      r2,#1
        ADD      r1,sp,#4
        MOV      r0,#0x25
        STRB     r4,[sp,#4]
        BL       readFramData
        LDRB     r1,[sp,#4]
        ADR      r0,|L1.1572|
        BL       __2printf
        MOV      r2,#4
        ADD      r1,sp,#8
        MOV      r0,#0x26
        STR      r4,[sp,#8]
        BL       readFramData
        LDR      r0,[sp,#8]
        LDR      r5,|L1.1596|
        UMULL    r1,r0,r5,r0
        LSL      r0,r0,#10
        LSR      r1,r0,#16
        ADR      r0,|L1.1600|
        BL       __2printf
        MOV      r2,#4
        ADD      r1,sp,#0xc
        MOV      r0,#0x2a
        STR      r4,[sp,#0xc]
        BL       readFramData
        LDR      r0,[sp,#0xc]
        UMULL    r1,r0,r5,r0
        LSL      r0,r0,#10
        LSR      r1,r0,#16
        ADR      r0,|L1.1628|
        BL       __2printf
        ADD      sp,sp,#0x14
        POP      {r4,r5,lr}
        BX       lr
|L1.1456|
        DCD      ||.data||
|L1.1460|
        DCD      flashAuxLED0
|L1.1464|
        DCD      perodicToggleAuxLED0State
|L1.1468|
        DCB      "\r\nSetting FACTORY DEFAULTS\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L1.1500|
        DCB      "Trigger distance low %d.%d feet\r\n",0
        DCB      0
        DCB      0
|L1.1536|
        DCB      "Trigger distance high %d.%d feet\r\n",0
        DCB      0
|L1.1572|
        DCB      "Zero velocity %dmph\r\n",0
        DCB      0
        DCB      0
|L1.1596|
        DCD      0x10624dd3
|L1.1600|
        DCB      "Averaging window %d Secs\r\n",0
        DCB      0
|L1.1628|
        DCB      "Asset reporting time %d Secs\r\n",0
        DCB      0
        ENDP

get32FromPacket PROC
        LDRB     r1,[r0,#0]
        LDRB     r2,[r0,#1]
        ORR      r1,r1,r2,LSL #8
        LDRB     r2,[r0,#2]
        LDRB     r0,[r0,#3]
        ORR      r1,r1,r2,LSL #16
        ORR      r0,r1,r0,LSL #24
        BX       lr
        ENDP

get16FromPacket PROC
        LDRB     r1,[r0,#0]
        LDRB     r0,[r0,#1]
        ORR      r0,r1,r0,LSL #8
        BX       lr
        ENDP

miscInit PROC
        PUSH     {r4,r5,lr}
        MOV      r4,#0x40000000
        MOV      r0,#0x10000
        SUB      r4,r4,#0x4000
        STR      r0,[r4,#0x3c]
        MOV      r5,#0x8000
        STR      r5,[r4,#0x38]
        MOV      r0,#0
        BL       setAuxLED0
        LDR      r1,|L1.1456|
        MOV      r0,#0
        STRB     r0,[r1,#0]  ; dryOut0
        MOV      r0,#0x20000000
        STR      r0,[r4,#0x98]
        STR      r5,[r4,#0x38]
        MOV      r0,#0x10000000
        STR      r0,[r4,#0x98]
        LDR      r0,|L1.1792|
        STR      r0,[r1,#4]  ; flashingLedState
        POP      {r4,r5,lr}
        BX       lr
        ENDP

|L1.1792|
        DCD      ledNopState

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.data||, DATA, ALIGN=2

dryOut0
        DCB      0x00,0x00,0x00,0x00
flashingLedState
        DCD      0x00000000
toggleTimeStamp
        DCD      0x00000000
toggleTime
        DCD      0x00000000

        EXPORT getModeSelect [CODE]
        EXPORT getBoardRev [CODE]
        EXPORT ledsDoWork [CODE]
        EXPORT ledNopState [CODE]
        EXPORT setRedLED [CODE]
        EXPORT setDryOut0 [CODE]
        EXPORT getDryOut0 [CODE]
        EXPORT setDryOut1 [CODE]
        EXPORT setYellowLED [CODE]
        EXPORT setAuxLED0 [CODE]
        EXPORT toggleYellowLED [CODE]
        EXPORT flashAuxLED0NTimes [CODE]
        EXPORT setPeriodicAuxLED0 [CODE]
        EXPORT setGreenLED [CODE]
        EXPORT toggleGreenLED [CODE]
        EXPORT toggleRedLED [CODE]
        EXPORT setHighUltraSonicTrigger [CODE]
        EXPORT setLowUltraSonicTrigger [CODE]
        EXPORT startUpUltraSonicTrigger [CODE]
        EXPORT disableWriteProtection [CODE]
        EXPORT enableWriteProtection [CODE]
        EXPORT setFramChipSelectHigh [CODE]
        EXPORT setFramChipSelectLow [CODE]
        EXPORT setFramSystemPairedBit [CODE]
        EXPORT haveBeenPaired [CODE]
        EXPORT setFramSystemLoggingTime [CODE]
        EXPORT getFramLoggingSampleTime [CODE]
        EXPORT setFactoryDefaults [CODE]
        EXPORT get32FromPacket [CODE]
        EXPORT get16FromPacket [CODE]
        EXPORT miscInit [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT hasTimedOut [CODE]
        IMPORT getTimeNow [CODE]
        IMPORT readFramData [CODE]
        IMPORT writeFramData [CODE]
        IMPORT __2printf [CODE]
        IMPORT _printf_percent [CODE]
        IMPORT _printf_d [CODE]
        IMPORT _printf_int_dec [CODE]

        KEEP flashAuxLED0
        KEEP perodicToggleAuxLED0State
        KEEP dryOut0
        KEEP flashingLedState
        KEEP toggleTimeStamp
        KEEP toggleTime

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,2
        ATTR SETVALUE Tag_ABI_optimization_goals,2
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
