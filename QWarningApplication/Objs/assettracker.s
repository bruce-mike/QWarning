; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --debug -c --asm -o.\objs\assettracker.o --depend=.\objs\assettracker.d --apcs=interwork -Otime --diag_suppress=9931 -IC:\Keil\ARM\INC\Phillips -I..\SharedCode -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --enum_is_int --omf_browse=.\objs\assettracker.crf assetTracker.c]
        ARM
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

        REQUIRE _printf_percent
        REQUIRE _printf_d
        REQUIRE _printf_int_dec
        REQUIRE _printf_pre_padding
        REQUIRE _printf_widthprec
        REQUIRE _printf_x
        REQUIRE _printf_longlong_hex
        REQUIRE _printf_flags
sendToAsset PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        LDRB     r0,[r0,#0]
        LDRB     r1,[r5,#1]
        MVN      r2,#0xff
        CMP      r0,#0
        ADD      r1,r2,r1,LSL #8
        ADD      r1,r1,r0
        AND      r6,r1,r2,LSR #16
        MOV      r2,#0
        MOV      r1,r2
        BLE      |L1.80|
|L1.48|
        LDRB     r3,[r5,r1]
        ADD      r1,r1,#1
        LSL      r1,r1,#16
        ADD      r2,r2,r3
        ASR      r1,r1,#16
        CMP      r0,r1
        AND      r2,r2,#0xff
        BGT      |L1.48|
|L1.80|
        MOV      r4,#0
        STRB     r2,[r5,r1]
|L1.88|
        LDRB     r0,[r5,r4]
        BL       serialSendByteToAsset
        ADD      r0,r4,#1
        BIC      r4,r0,#0x10000
        CMP      r4,r6
        BLS      |L1.88|
        POP      {r4-r6,lr}
        BX       lr
        ENDP

sendStatusCommand PROC
        PUSH     {r4-r6,lr}
        SUB      sp,sp,#8
        MOV      r2,#0
        MOV      r4,r0
        MOV      r1,r0
        ADR      r0,|L1.280|
        STR      r2,[sp,#0]
        STR      r2,[sp,#4]
        BL       __2printf
        MOV      r2,#4
        STRB     r2,[sp,#0]
        MOV      r2,#1
        STRB     r2,[sp,#1]
        MOV      r2,#5
        STRB     r2,[sp,#2]
        STRB     r4,[sp,#3]
        LDRB     r2,[sp,#0]
        MOV      r1,#0
        MOV      r5,sp
        MOV      r6,#4
        MOV      r0,r1
|L1.204|
        LDRB     r3,[r5,r0]
        ADD      r0,r0,#1
        LSL      r0,r0,#16
        ADD      r1,r1,r3
        ASR      r0,r0,#16
        CMP      r2,r0
        AND      r1,r1,#0xff
        BGT      |L1.204|
        MOV      r4,#0
        STRB     r1,[r5,r0]
|L1.244|
        LDRB     r0,[r5,r4]
        BL       serialSendByteToAsset
        ADD      r0,r4,#1
        BIC      r4,r0,#0x10000
        CMP      r4,r6
        BLS      |L1.244|
        ADD      sp,sp,#8
        POP      {r4-r6,lr}
        BX       lr
|L1.280|
        DCB      "Returning COMMAND_STATUS [%d] to Asset Tracker\r\n",0
        DCB      0
        DCB      0
        DCB      0
        ENDP

getReportingTimeSecs PROC
        LDR      r0,|L1.628|
        LDR      r1,|L1.632|
        LDR      r0,[r0,#8]  ; reportPeriodMSecs
        UMULL    r2,r0,r1,r0
        LSL      r0,r0,#10
        LSR      r0,r0,#16
        BX       lr
        ENDP

sendSettings PROC
        PUSH     {r4,r5,lr}
        MOV      r0,#0
        SUB      sp,sp,#0x1c
        STR      r0,[sp,#0]
        STR      r0,[sp,#4]
        MOV      r4,r0
        STR      r0,[sp,#8]
        STR      r0,[sp,#0xc]
        STR      r0,[sp,#0x10]
        STR      r0,[sp,#0x14]
        STR      r0,[sp,#0x18]
        MOV      r1,#0x19
        MOV      r0,sp
        BL       __aeabi_memclr4
        MOV      r0,#0x44
        STRB     r0,[sp,#0]
        MOV      r0,#0x31
        STRB     r0,[sp,#1]
        MOV      r0,#0x37
        STRB     r0,[sp,#2]
        MOV      r0,#0x28
        STRB     r0,[sp,#3]
        MOV      r0,#0x3d
        STRB     r0,[sp,#4]
        BL       getBoardRev
        STRB     r0,[sp,#5]
        BL       getMinSpeedThreshold
        STRB     r0,[sp,#6]
        LDR      r0,|L1.628|
        LDR      r1,[r0,#8]  ; reportPeriodMSecs
        LDR      r0,|L1.632|
        UMULL    r2,r1,r0,r1
        LSR      r0,r1,#6
        LSR      r1,r0,#8
        STRB     r1,[sp,#7]
        STRB     r0,[sp,#8]
        BL       getSensorTriggerDistanceLow
        STRB     r0,[sp,#9]
        BL       getSensorTriggerDistanceHigh
        STRB     r0,[sp,#0xa]
        BL       getAverageWindowTimeSecs
        STRB     r0,[sp,#0xb]
        MOV      r0,#0
        MOV      r5,sp
|L1.536|
        LDRB     r1,[r5,r0]
        ADD      r0,r0,#1
        AND      r0,r0,#0xff
        ADD      r1,r1,r4
        CMP      r0,#0x19
        AND      r4,r1,#0xff
        BCC      |L1.536|
        STRB     r4,[sp,#0x19]
        MOV      r4,#0
|L1.572|
        LDRB     r1,[r5,r4]
        ADR      r0,|L1.636|
        BL       __2printf
        LDRB     r0,[r5,r4]
        BL       serialSendByteToAsset
        ADD      r0,r4,#1
        AND      r4,r0,#0xff
        CMP      r4,#0x1a
        BCC      |L1.572|
        ADR      r0,|L1.644|
        BL       __2printf
        ADD      sp,sp,#0x1c
        POP      {r4,r5,lr}
        BX       lr
|L1.628|
        DCD      ||.data||
|L1.632|
        DCD      0x10624dd3
|L1.636|
        DCB      "0x%2X ",0
        DCB      0
|L1.644|
        DCB      "\r\n",0
        DCB      0
        ENDP

sendTelemetry PROC
        PUSH     {r4,r5,lr}
        MOV      r0,#0
        SUB      sp,sp,#0x1c
        STR      r0,[sp,#0]
        STR      r0,[sp,#4]
        MOV      r4,r0
        STR      r0,[sp,#8]
        STR      r0,[sp,#0xc]
        STR      r0,[sp,#0x10]
        STR      r0,[sp,#0x14]
        STR      r0,[sp,#0x18]
        MOV      r1,#0x19
        MOV      r0,sp
        BL       __aeabi_memclr4
        MOV      r0,#0x44
        STRB     r0,[sp,#0]
        MOV      r0,#0x31
        STRB     r0,[sp,#1]
        MOV      r0,#0x36
        STRB     r0,[sp,#2]
        MOV      r0,#1
        BL       getAvgSpeed
        STRB     r0,[sp,#3]
        MOV      r0,#2
        BL       getAvgSpeed
        STRB     r0,[sp,#4]
        MOV      r0,#3
        BL       getAvgSpeed
        STRB     r0,[sp,#5]
        MOV      r0,#4
        BL       getAvgSpeed
        STRB     r0,[sp,#6]
        MOV      r0,#5
        BL       getAvgSpeed
        STRB     r0,[sp,#7]
        MOV      r0,#6
        BL       getAvgSpeed
        STRB     r0,[sp,#8]
        MOV      r0,#7
        BL       getAvgSpeed
        STRB     r0,[sp,#9]
        MOV      r0,#8
        BL       getAvgSpeed
        STRB     r0,[sp,#0xa]
        MOV      r0,#9
        BL       getAvgSpeed
        STRB     r0,[sp,#0xb]
        MOV      r0,#0xa
        BL       getAvgSpeed
        STRB     r0,[sp,#0xc]
        BL       getAverageWindowTimeSecs
        MOV      r1,#0x3e8
        MUL      r0,r1,r0
        BL       getSensorOccupancy
        STRB     r0,[sp,#0xd]
        LSR      r0,r0,#8
        STRB     r0,[sp,#0xe]
        MOV      r0,#0
        BL       getTotalRadarReadings
        STRB     r0,[sp,#0xf]
        MOV      r0,#0
        BL       getNonZeroRadarReadings
        STRB     r0,[sp,#0x10]
        BL       ADCGetBatteryVoltage
        LSR      r0,r0,#8
        STRB     r0,[sp,#0x11]
        BL       ADCGetBatteryVoltage
        STRB     r0,[sp,#0x12]
        LDR      r0,|L1.628|
        LDRH     r0,[r0,#2]  ; assetAlarmBits
        LSR      r1,r0,#8
        STRB     r1,[sp,#0x13]
        STRB     r0,[sp,#0x14]
        BL       rateLimiterTokenCount
        STRB     r0,[sp,#0x15]
        BL       getLastRadarReading
        STRB     r0,[sp,#0x16]
        BL       getLasSensortReading
        STRB     r0,[sp,#0x17]
        MOV      r0,#0
        MOV      r5,sp
|L1.972|
        LDRB     r1,[r5,r0]
        ADD      r0,r0,#1
        AND      r0,r0,#0xff
        ADD      r1,r1,r4
        CMP      r0,#0x19
        AND      r4,r1,#0xff
        BCC      |L1.972|
        STRB     r4,[sp,#0x19]
        MOV      r4,#0
|L1.1008|
        LDRB     r1,[r5,r4]
        ADR      r0,|L1.1072|
        BL       __2printf
        LDRB     r0,[r5,r4]
        BL       serialSendByteToAsset
        ADD      r0,r4,#1
        AND      r4,r0,#0xff
        CMP      r4,#0x1a
        BCC      |L1.1008|
        BL       getTimeNow
        MOV      r1,r0
        ADR      r0,|L1.1080|
        BL       __2printf
        ADD      sp,sp,#0x1c
        POP      {r4,r5,lr}
        BX       lr
|L1.1072|
        DCB      "0x%X ",0
        DCB      0
        DCB      0
|L1.1080|
        DCB      "  <%d>\r\n",0
        DCB      0
        DCB      0
        DCB      0
        ENDP

buildRxAssetPacket PROC
        PUSH     {r4-r10,lr}
        LDR      r8,|L1.628|
        MOV      r4,r0
        LDR      r0,[r8,#0x18]  ; assetRxTimeStamp
        MOV      r1,#0x32
        BL       hasTimedOut
        CMP      r0,#0
        MOV      r9,#0
        STRHNE   r9,[r8,#4]  ; assetCursor
        BL       getTimeNow
        STR      r0,[r8,#0x18]  ; assetRxTimeStamp
        LDRH     r1,[r8,#4]  ; assetCursor
        LDR      r10,|L1.1788|
        CMP      r1,#1
        STRB     r4,[r10,r1]
        BEQ      |L1.1376|
        LDRHCS   r0,[r8,#6]  ; cmdLen
        CMPCS    r1,r0
        BCC      |L1.2172|
        LDR      r4,|L1.1788|
        STRH     r9,[r8,#4]  ; assetCursor
        LDRB     r1,[r4,#1]
        LDRB     r0,[r4,#0]
        MVN      r2,#0xff
        ADD      r1,r2,r1,LSL #8
        ADD      r0,r0,r1
        ANDS     r6,r0,r2,LSR #16
        MOV      r7,#0
        MOV      r0,r7
        BEQ      |L1.1240|
|L1.1212|
        LDRB     r1,[r4,r0]
        ADD      r0,r0,#1
        BIC      r0,r0,#0x10000
        ADD      r1,r1,r7
        CMP      r6,r0
        AND      r7,r1,#0xff
        BHI      |L1.1212|
|L1.1240|
        LDRB     r2,[r4,r6]
        MOV      r3,r7
        MOV      r1,r6
        ADR      r0,|L1.1792|
        BL       __2printf
        MOV      r5,#0x7c
|L1.1264|
        LDRB     r2,[r4,r5]
        MOV      r1,r5
        ADR      r0,|L1.1852|
        BL       __2printf
        ADD      r0,r5,#1
        BIC      r5,r0,#0x10000
        CMP      r5,#0x85
        BCC      |L1.1264|
        ADR      r0,|L1.1860|
        BL       __2printf
        LDRB     r0,[r4,r6]
        CMP      r0,r7
        MOVNE    r0,#1
        BNE      |L1.2376|
        LDRB     r2,[r10,#2]  ; assetBuffer
        CMP      r2,#4
        BEQ      |L1.1408|
        LDRB     r1,[r10,#3]
        CMP      r1,#0x11
        BEQ      |L1.2384|
        BGT      |L1.2148|
        CMP      r1,#1
        BEQ      |L1.2252|
        CMP      r1,#0xf
        BEQ      |L1.2212|
        CMP      r1,#0x10
        BEQ      |L1.2236|
        B        |L1.2164|
|L1.1376|
        LDRB     r0,[r10,#1]
        LDRB     r1,[r10,#0]
        LSL      r0,r0,#8
        SUB      r0,r0,#0x100
        AND      r0,r0,#0xff00
        ADD      r0,r0,r1
        STRH     r0,[r8,#6]  ; cmdLen
        B        |L1.2172|
|L1.1408|
        LDR      r4,|L1.1788|
        MOV      r5,#0
        BL       watchdogFeed
        LDRB     r1,[r4,#3]
        ADR      r0,|L1.1864|
        BL       __2printf
        LDRB     r1,[r4,#3]
        CMP      r1,#0x11
        BEQ      |L1.1480|
        CMP      r1,#0x13
        BEQ      |L1.1612|
        CMP      r1,#0x14
        BEQ      |L1.2072|
        ADR      r0,|L1.1888|
        BL       __2printf
|L1.1468|
        MOV      r0,r5
        BL       sendStatusCommand
        B        |L1.2172|
|L1.1480|
        ADR      r0,|L1.1940|
        BL       __2printf
        LDRB     r0,[r4,#4]
        CMP      r0,#5
        BEQ      |L1.1516|
        ADR      r0,|L1.1964|
        BL       __2printf
        MOV      r5,#9
        B        |L1.1468|
|L1.1516|
        LDRB     r0,[r4,#8]
        LDRB     r1,[r4,#5]
        LDRB     r2,[r4,#7]
        ADD      r0,r0,r1,LSL #24
        LDRB     r1,[r4,#6]
        LSL      r1,r1,#16
        ADD      r1,r1,r2,LSL #8
        ADD      r1,r1,r0
        STR      r1,[r8,#0xc]  ; codeSize
        LDRB     r0,[r4,#0xc]
        LDRB     r2,[r4,#9]
        LDRB     r3,[r4,#0xb]
        ADD      r0,r0,r2,LSL #24
        LDRB     r2,[r4,#0xa]
        LSL      r2,r2,#16
        ADD      r2,r2,r3,LSL #8
        ADD      r2,r2,r0
        ADR      r0,|L1.1996|
        STR      r2,[r8,#0x10]  ; codeCrc32
        BL       __2printf
        BL       eraseUpgradeSectors
        CMP      r0,#0
        MOVEQ    r5,#5
        B        |L1.1468|
|L1.1612|
        ADR      r0,|L1.2028|
        BL       __2printf
        LDRB     r0,[r4,#1]
        LDRB     r1,[r4,#0]
        MOV      r5,#6
        LSL      r0,r0,#8
        SUB      r0,r0,#0x100
        AND      r0,r0,#0xff00
        ADD      r0,r0,r1
        SUB      r0,r0,#7
        LSL      r6,r0,#16
        LSR      r6,r6,#16
        MOV      r1,r6
        ADR      r0,|L1.2048|
        BL       __2printf
        CMP      r6,#0x100
        BHI      |L1.1468|
        LDR      r0,|L1.2068|
        MOV      r2,#0xff
        MOV      r1,#0x100
        BL       __aeabi_memset
        CMP      r6,#0
        LDRHI    r1,|L1.2068|
        MOV      r0,#0
        BLS      |L1.1740|
|L1.1712|
        ADD      r2,r4,r0
        LDRB     r2,[r2,#6]
        STRB     r2,[r1,r0]
        ADD      r0,r0,#1
        BIC      r0,r0,#0x10000
        CMP      r6,r0
        BHI      |L1.1712|
|L1.1740|
        LDRB     r0,[r4,#4]
        LDRB     r1,[r4,#5]
        MOV      r2,r6
        ADD      r0,r0,r1,LSL #8
        BIC      r0,r0,#0x10000
        MOV      r1,#0x20000
        ADD      r0,r1,r0,LSL #8
        LDR      r1,|L1.2068|
        BL       writeFlashData
        CMP      r0,#1
        MOVEQ    r5,#0
        B        |L1.1468|
|L1.1788|
        DCD      ||.bss||+0x140
|L1.1792|
        DCB      "Asset tracker CHECKSUM cmdLen[%d] msg[0x%X] calc[0x%X]\r"
        DCB      "\n",0
        DCB      0
        DCB      0
        DCB      0
|L1.1852|
        DCB      "%d[%d] ",0
|L1.1860|
        DCB      "\r\n",0
        DCB      0
|L1.1864|
        DCB      "** paramByte[%d] ***\r\n",0
        DCB      0
|L1.1888|
        DCB      "Unknown software upgrade command PARAMETER[%d]\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L1.1940|
        DCB      "PARAM_START_UPGRADE\r\n",0
        DCB      0
        DCB      0
|L1.1964|
        DCB      "file target ID not QWarning\r\n",0
        DCB      0
        DCB      0
|L1.1996|
        DCB      "codeSize[%d]  codeCrc32[%08x]\r\n",0
|L1.2028|
        DCB      "PARAM_WRITE_BLOCK\r\n",0
|L1.2048|
        DCB      "Code bytes[%d]\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L1.2068|
        DCD      ||.bss||+0x40
|L1.2072|
        LDR      r1,[r8,#0xc]  ; codeSize
        MOV      r0,#0x20000
        BL       crc32Calculate
        ADD      r2,r8,#0xc
        LDM      r2,{r1,r2}  ; codeCrc32, codeSize
        MOV      r4,r0
        MOV      r3,r0
        ADR      r0,|L1.2420|
        BL       __2printf
        LDR      r2,[r8,#0x10]  ; codeCrc32
        CMP      r2,r4
        MOVNE    r5,#7
        BNE      |L1.1468|
        LDR      r1,[r8,#0xc]  ; codeSize
        MOV      r0,#5
        BL       writeUpgradeFlag
        CMP      r0,#0
        MOVEQ    r5,#8
        B        |L1.1468|
|L1.2148|
        CMP      r1,#0x12
        BEQ      |L1.2172|
        CMP      r1,#0x15
        BEQ      |L1.2396|
|L1.2164|
        ADR      r0,|L1.2468|
        BL       __2printf
|L1.2172|
        LDRH     r0,[r8,#4]  ; assetCursor
        MOV      r1,#0x5e
        ADD      r1,r1,#0x100
        ADD      r0,r0,#1
        BIC      r0,r0,#0x10000
        CMP      r0,r1
        STRH     r0,[r8,#4]  ; assetCursor
        STRHCS   r9,[r8,#4]  ; assetCursor
        POP      {r4-r10,lr}
        BX       lr
|L1.2212|
        CMP      r2,#1
        BNE      |L1.2228|
        BL       sendTelemetry
        B        |L1.2172|
|L1.2228|
        MOV      r0,#3
        B        |L1.2376|
|L1.2236|
        CMP      r2,#1
        BNE      |L1.2228|
        BL       sendSettings
        B        |L1.2172|
|L1.2252|
        CMP      r2,#2
        BNE      |L1.2372|
        LDRB     r0,[r10,#5]
        BL       saveRadarZeroSpeed
        LDRB     r0,[r10,#6]
        LDRB     r1,[r10,#7]
        MOV      r2,#4
        ORR      r0,r0,r1,LSL #8
        MOV      r1,#0x3e8
        MUL      r0,r1,r0
        MOV      r1,#0x27c0
        ADD      r1,r1,#0x90000
        CMP      r0,r1
        MOVHI    r0,#0xa60
        ADDHI    r0,r0,#0xe000
        STR      r0,[r8,#8]  ; reportPeriodMSecs
        LDR      r1,|L1.2512|
        MOV      r0,#0x2a
        BL       writeFramData
        LDR      r1,[r8,#8]  ; reportPeriodMSecs
        ADR      r0,|L1.2516|
        BL       __2printf
        LDRB     r0,[r10,#8]
        BL       saveSensorTriggerDistanceLow
        LDRB     r0,[r10,#9]
        BL       saveSensorTriggerDistanceHigh
        LDRB     r0,[r10,#4]
        BL       saveAverageWindowTime
        BL       sendSettings
        B        |L1.2172|
|L1.2372|
        MOV      r0,#2
|L1.2376|
        BL       sendStatusCommand
        B        |L1.2172|
|L1.2384|
        CMP      r2,#2
        BNE      |L1.2372|
        B        |L1.2172|
|L1.2396|
        CMP      r2,#7
        BNE      |L1.2372|
        MOV      r0,#0
        BL       sendStatusCommand
        BL       watchdogReboot
        B        |L1.2172|
|L1.2420|
        DCB      "END_UPGRADE Size[%d]  Crc[%x]  calcCrc[%x]\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L1.2468|
        DCB      "UNKNOWN Asset Tracker command 0x%X 0x%X\r\n",0
        DCB      0
        DCB      0
|L1.2512|
        DCD      ||.data||+0x8
|L1.2516|
        DCB      "Saving asset reporting time %dmS\r\n",0
        DCB      0
        ENDP

getAssetAlarmBits PROC
        LDR      r0,|L1.628|
        LDRH     r0,[r0,#2]  ; assetAlarmBits
        BX       lr
        ENDP

assetTrackerDoWork PROC
        PUSH     {r4,lr}
        BL       rateLimiterIsActive
        CMP      r0,#1
        MOVEQ    r0,#0x20
        MOVNE    r0,#0
        ORR      r4,r0,#0x8000
        BL       getBatteryOperatingStatus
        ORR      r4,r4,r0
        BL       getRadarOperatingStatus
        ORR      r4,r4,r0
        BL       getSensorOperatingStatus
        ORR      r0,r0,r4
        LDR      r4,|L1.628|
        LDRH     r1,[r4,#2]  ; assetAlarmBits
        CMP      r0,r1
        BEQ      |L1.2660|
        EOR      r2,r0,r1
        BIC      r1,r2,r1
        TST      r1,#0x3f
        STRH     r0,[r4,#2]  ; assetAlarmBits
        POPEQ    {r4,lr}
        BXEQ     lr
        POP      {r4,lr}
        B        sendTelemetry
|L1.2660|
        LDR      r1,[r4,#8]  ; reportPeriodMSecs
        CMP      r1,#0
        BEQ      |L1.2708|
        LDR      r0,[r4,#0x14]  ; periodicTimeStamp
        BL       hasTimedOut
        CMP      r0,#0
        BEQ      |L1.2708|
        BL       sendTelemetry
        BL       getTimeNow
        STR      r0,[r4,#0x14]  ; periodicTimeStamp
        POP      {r4,lr}
        BX       lr
|L1.2708|
        LDRB     r0,[r4,#0]  ; sentSettingsReportAfterPOR
        CMP      r0,#0
        POPNE    {r4,lr}
        BXNE     lr
        BL       getTimeNow
        MOV      r1,#0xf90
        ADD      r1,r1,#0x15000
        CMP      r0,r1
        POPLS    {r4,lr}
        BXLS     lr
        MOV      r0,#1
        STRB     r0,[r4,#0]  ; sentSettingsReportAfterPOR
        POP      {r4,lr}
        B        sendSettings
        ENDP

assetTrackerInit PROC
        PUSH     {r3-r5,lr}
        LDR      r4,|L1.628|
        MOV      r0,#0
        STRH     r0,[r4,#2]  ; assetAlarmBits
        MOV      r2,#4
        MOV      r1,sp
        MOV      r0,#0x2a
        BL       readFramData
        LDRB     r0,[sp,#0]
        LDRB     r1,[sp,#3]
        LDRB     r2,[sp,#1]
        ORR      r0,r0,r1,LSL #24
        LDRB     r1,[sp,#2]
        LSL      r1,r1,#16
        ORR      r1,r1,r2,LSL #8
        ORR      r0,r0,r1
        MOV      r1,#0x27c0
        ADD      r1,r1,#0x90000
        CMP      r0,r1
        STR      r0,[r4,#8]  ; reportPeriodMSecs
        MOVHI    r0,#0xa60
        ADDHI    r0,r0,#0xe000
        STRHI    r0,[r4,#8]  ; reportPeriodMSecs
        LDRH     r0,[r4,#2]  ; assetAlarmBits
        ORR      r0,r0,#0x8000
        STRH     r0,[r4,#2]  ; assetAlarmBits
        POP      {r3-r5,lr}
        BX       lr
        ENDP

printOutAlarmBits PROC
        PUSH     {r4-r6,lr}
        LDR      r0,|L1.628|
        LDR      r4,|L1.3296|
        LDRH     r5,[r0,#2]  ; assetAlarmBits
        MOV      r0,#0
        STR      r0,[r4,#0]  ; rtnString
        STR      r0,[r4,#4]  ; rtnString
        STR      r0,[r4,#8]  ; rtnString
        STR      r0,[r4,#0xc]  ; rtnString
        STR      r0,[r4,#0x10]  ; rtnString
        STR      r0,[r4,#0x14]  ; rtnString
        STR      r0,[r4,#0x18]  ; rtnString
        STR      r0,[r4,#0x1c]  ; rtnString
        STR      r0,[r4,#0x20]  ; rtnString
        STR      r0,[r4,#0x24]  ; rtnString
        STR      r0,[r4,#0x28]  ; rtnString
        STR      r0,[r4,#0x2c]  ; rtnString
        STR      r0,[r4,#0x30]  ; rtnString
        STR      r0,[r4,#0x34]  ; rtnString
        CMP      r5,#0x8000
        STR      r0,[r4,#0x38]  ; rtnString
        CMPNE    r5,#0
        STR      r0,[r4,#0x3c]  ; rtnString
        BEQ      |L1.3272|
        TST      r5,#0x100
        BEQ      |L1.3004|
        LDR      r0,|L1.3296|
        BL       strlen
        AND      r0,r0,#0xff
        ADD      r0,r0,r4
        ADR      r1,|L1.3300|
        BL       __2sprintf
|L1.3004|
        TST      r5,#1
        BEQ      |L1.3036|
        LDR      r0,|L1.3296|
        BL       strlen
        AND      r0,r0,#0xff
        ADD      r0,r0,r4
        ADR      r1,|L1.3320|
        BL       __2sprintf
|L1.3036|
        TST      r5,#2
        BEQ      |L1.3068|
        LDR      r0,|L1.3296|
        BL       strlen
        AND      r0,r0,#0xff
        ADD      r0,r0,r4
        ADR      r1,|L1.3336|
        BL       __2sprintf
|L1.3068|
        TST      r5,#4
        BEQ      |L1.3100|
        LDR      r0,|L1.3296|
        BL       strlen
        AND      r0,r0,#0xff
        ADD      r0,r0,r4
        ADR      r1,|L1.3360|
        BL       __2sprintf
|L1.3100|
        TST      r5,#8
        BEQ      |L1.3132|
        LDR      r0,|L1.3296|
        BL       strlen
        AND      r0,r0,#0xff
        ADD      r0,r0,r4
        ADR      r1,|L1.3380|
        BL       __2sprintf
|L1.3132|
        TST      r5,#0x10
        BEQ      |L1.3164|
        LDR      r0,|L1.3296|
        BL       strlen
        AND      r0,r0,#0xff
        ADD      r0,r0,r4
        ADR      r1,|L1.3400|
        BL       __2sprintf
|L1.3164|
        TST      r5,#0x800
        BEQ      |L1.3196|
        LDR      r0,|L1.3296|
        BL       strlen
        AND      r0,r0,#0xff
        ADD      r0,r0,r4
        ADR      r1,|L1.3420|
        BL       __2sprintf
|L1.3196|
        TST      r5,#0x20
        BEQ      |L1.3228|
        LDR      r0,|L1.3296|
        BL       strlen
        AND      r0,r0,#0xff
        ADD      r0,r0,r4
        ADR      r1,|L1.3440|
        BL       __2sprintf
|L1.3228|
        TST      r5,#0x1000
        BEQ      |L1.3260|
        LDR      r0,|L1.3296|
        BL       strlen
        AND      r0,r0,#0xff
        ADD      r0,r0,r4
        ADR      r1,|L1.3456|
        BL       __2sprintf
|L1.3260|
        POP      {r4-r6,lr}
        LDR      r0,|L1.3296|
        BX       lr
|L1.3272|
        LDR      r0,|L1.3296|
        ADR      r1,|L1.3476|
        BL       __2sprintf
        POP      {r4-r6,lr}
        LDR      r0,|L1.3296|
        BX       lr
|L1.3296|
        DCD      ||.bss||
|L1.3300|
        DCB      "Battery Warning, ",0
        DCB      0
        DCB      0
|L1.3320|
        DCB      "Battery Low, ",0
        DCB      0
        DCB      0
|L1.3336|
        DCB      "Battery Disconnecting, ",0
|L1.3360|
        DCB      "Sensor blocked, ",0
        DCB      0
        DCB      0
        DCB      0
|L1.3380|
        DCB      "Sensor timed out, ",0
        DCB      0
|L1.3400|
        DCB      "Radar timed out, ",0
        DCB      0
        DCB      0
|L1.3420|
        DCB      "Traffic stopped, ",0
        DCB      0
        DCB      0
|L1.3440|
        DCB      "Modem tokens, ",0
        DCB      0
|L1.3456|
        DCB      "Solar charging, ",0
        DCB      0
        DCB      0
        DCB      0
|L1.3476|
        DCB      "No alarm bits set",0
        DCB      0
        DCB      0
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

rtnString
        %        64
blockCodeUpgrade
        %        256
assetBuffer
        %        350

        AREA ||.data||, DATA, ALIGN=2

sentSettingsReportAfterPOR
        DCB      0x00,0x00
assetAlarmBits
        DCW      0x8000
assetCursor
        DCW      0x0000
cmdLen
        DCB      0x00,0x00
reportPeriodMSecs
        DCD      0x0000ea60
codeSize
        DCD      0x00000000
codeCrc32
        DCD      0x00000000
periodicTimeStamp
        DCD      0x00000000
assetRxTimeStamp
        DCD      0x00000000

        EXPORT sendToAsset [CODE]
        EXPORT getReportingTimeSecs [CODE]
        EXPORT buildRxAssetPacket [CODE]
        EXPORT getAssetAlarmBits [CODE]
        EXPORT assetTrackerDoWork [CODE]
        EXPORT assetTrackerInit [CODE]
        EXPORT printOutAlarmBits [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT serialSendByteToAsset [CODE]
        IMPORT _printf_percent [CODE]
        IMPORT _printf_d [CODE]
        IMPORT _printf_int_dec [CODE]
        IMPORT __2printf [CODE]
        IMPORT __aeabi_memclr4 [CODE]
        IMPORT getBoardRev [CODE]
        IMPORT getMinSpeedThreshold [CODE]
        IMPORT getSensorTriggerDistanceLow [CODE]
        IMPORT getSensorTriggerDistanceHigh [CODE]
        IMPORT getAverageWindowTimeSecs [CODE]
        IMPORT _printf_pre_padding [CODE]
        IMPORT _printf_widthprec [CODE]
        IMPORT _printf_x [CODE]
        IMPORT _printf_longlong_hex [CODE]
        IMPORT getAvgSpeed [CODE]
        IMPORT getSensorOccupancy [CODE]
        IMPORT getTotalRadarReadings [CODE]
        IMPORT getNonZeroRadarReadings [CODE]
        IMPORT ADCGetBatteryVoltage [CODE]
        IMPORT rateLimiterTokenCount [CODE]
        IMPORT getLastRadarReading [CODE]
        IMPORT getLasSensortReading [CODE]
        IMPORT getTimeNow [CODE]
        IMPORT hasTimedOut [CODE]
        IMPORT watchdogFeed [CODE]
        IMPORT _printf_flags [CODE]
        IMPORT eraseUpgradeSectors [CODE]
        IMPORT __aeabi_memset [CODE]
        IMPORT writeFlashData [CODE]
        IMPORT crc32Calculate [CODE]
        IMPORT writeUpgradeFlag [CODE]
        IMPORT saveRadarZeroSpeed [CODE]
        IMPORT writeFramData [CODE]
        IMPORT saveSensorTriggerDistanceLow [CODE]
        IMPORT saveSensorTriggerDistanceHigh [CODE]
        IMPORT saveAverageWindowTime [CODE]
        IMPORT watchdogReboot [CODE]
        IMPORT rateLimiterIsActive [CODE]
        IMPORT getBatteryOperatingStatus [CODE]
        IMPORT getRadarOperatingStatus [CODE]
        IMPORT getSensorOperatingStatus [CODE]
        IMPORT readFramData [CODE]
        IMPORT __2sprintf [CODE]
        IMPORT strlen [CODE]

        KEEP sendStatusCommand
        KEEP sendSettings
        KEEP sendTelemetry
        KEEP rtnString
        KEEP blockCodeUpgrade
        KEEP assetBuffer
        KEEP sentSettingsReportAfterPOR
        KEEP assetAlarmBits
        KEEP assetCursor
        KEEP cmdLen
        KEEP reportPeriodMSecs
        KEEP codeSize
        KEEP codeCrc32
        KEEP periodicTimeStamp
        KEEP assetRxTimeStamp

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,2
        ATTR SETVALUE Tag_ABI_optimization_goals,2
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
