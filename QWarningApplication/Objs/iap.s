; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --debug -c --asm -o.\objs\iap.o --depend=.\objs\iap.d --apcs=interwork -Otime --diag_suppress=9931 -IC:\Keil\ARM\INC\Phillips -I..\SharedCode -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --enum_is_int --omf_browse=.\objs\iap.crf ..\SharedCode\iap.c]
        ARM
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

swapUint16 PROC
        PUSH     {r0}
        SUB      sp,sp,#4
        LDRB     r0,[sp,#5]
        STRB     r0,[sp,#0]
        LDRB     r0,[sp,#4]
        STRB     r0,[sp,#1]
        LDRH     r0,[sp,#0]
        ADD      sp,sp,#8
        BX       lr
        ENDP

swapUint32 PROC
        LSL      r2,r0,#8
        BIC      r1,r1,#0xff
        LSR      r2,r2,#24
        ORR      r1,r1,r0,LSR #24
        LSL      r2,r2,#8
        BIC      r1,r1,#0xff00
        AND      r2,r2,#0xff00
        ORR      r1,r1,r2
        LSL      r2,r0,#16
        LSR      r2,r2,#24
        LSL      r2,r2,#16
        BIC      r1,r1,#0xff0000
        AND      r2,r2,#0xff0000
        ORR      r1,r1,r2
        BIC      r1,r1,#0xff000000
        ORR      r0,r1,r0,LSL #24
        BX       lr
        ENDP

convertByteToUint32 PROC
        LDRB     r1,[r0,#3]
        LDRB     r2,[r0,#0]
        ADD      r1,r1,r2,LSL #24
        LDRB     r2,[r0,#1]
        LDRB     r0,[r0,#2]
        LSL      r2,r2,#16
        ADD      r0,r2,r0,LSL #8
        ADD      r0,r0,r1
        BX       lr
        ENDP

getSectorAddress PROC
        CMP      r0,#0xf
        LDRCC    pc,[pc,r0,LSL #2]
||__switch$$||                  ; Alternate entry point
        B        |L1.332|
        DCD      ||__switch$$||+0x40
        DCD      ||__switch$$||+0x48
        DCD      ||__switch$$||+0x50
        DCD      ||__switch$$||+0x58
        DCD      ||__switch$$||+0x60
        DCD      ||__switch$$||+0x68
        DCD      ||__switch$$||+0x70
        DCD      ||__switch$$||+0x78
        DCD      ||__switch$$||+0x80
        DCD      ||__switch$$||+0x88
        DCD      ||__switch$$||+0x90
        DCD      ||__switch$$||+0x98
        DCD      ||__switch$$||+0xa0
        DCD      ||__switch$$||+0xa8
        DCD      ||__switch$$||+0xb0
        MOV      r0,#0
        BX       lr
        MOV      r0,#0x1000
        BX       lr
        MOV      r0,#0x2000
        BX       lr
        MOV      r0,#0x3000
        BX       lr
        MOV      r0,#0x4000
        BX       lr
        MOV      r0,#0x5000
        BX       lr
        MOV      r0,#0x6000
        BX       lr
        MOV      r0,#0x7000
        BX       lr
        MOV      r0,#0x8000
        BX       lr
        MOV      r0,#0x10000
        BX       lr
        MOV      r0,#0x18000
        BX       lr
        MOV      r0,#0x20000
        BX       lr
        MOV      r0,#0x28000
        BX       lr
        MOV      r0,#0x30000
        BX       lr
        MOV      r0,#0x38000
        BX       lr
|L1.332|
        MOV      r0,#0x40000
        BX       lr
        ENDP

getSectorSize PROC
        CMP      r0,#9
        MOVLS    r0,#0x1000
        BXLS     lr
        CMP      r0,#0xe
        MOVLS    r0,#0x8000
        MOVHI    r0,#0
        BX       lr
        ENDP

getSectorNumber PROC
        CMP      r0,#0x1000
        MOVCC    r0,#0
        BXCC     lr
        CMP      r0,#0x2000
        MOVCC    r0,#1
        BXCC     lr
        CMP      r0,#0x3000
        MOVCC    r0,#2
        BXCC     lr
        CMP      r0,#0x4000
        MOVCC    r0,#3
        BXCC     lr
        CMP      r0,#0x5000
        MOVCC    r0,#4
        BXCC     lr
        CMP      r0,#0x6000
        MOVCC    r0,#5
        BXCC     lr
        CMP      r0,#0x7000
        MOVCC    r0,#6
        BXCC     lr
        CMP      r0,#0x8000
        MOVCC    r0,#7
        BXCC     lr
        CMP      r0,#0x10000
        MOVCC    r0,#8
        BXCC     lr
        CMP      r0,#0x18000
        MOVCC    r0,#9
        BXCC     lr
        CMP      r0,#0x20000
        MOVCC    r0,#0xa
        BXCC     lr
        CMP      r0,#0x28000
        MOVCC    r0,#0xb
        BXCC     lr
        CMP      r0,#0x30000
        MOVCC    r0,#0xc
        BXCC     lr
        CMP      r0,#0x88000
        MOVCC    r0,#0xd
        MOVCS    r0,#0xe
        BX       lr
        ENDP

compare PROC
        PUSH     {r3,lr}
        MOV      r12,r1
        MOV      r1,#0
        STR      r1,[sp,#0]
        MOV      r3,r2
        MOV      r1,r0
        MOV      r2,r12
        MOV      r0,#0x38
        BL       iap
        POP      {r3,lr}
        BX       lr
        ENDP

copy_ram_to_flash PROC
        PUSH     {r3-r5,lr}
        LDR      r4,|L1.2676|
        MOV      r12,r1
        LDRB     r1,[r4,#0]  ; isInterruptMaskSaved
        MOV      r5,#0
        CMP      r1,#0
        BNE      |L1.636|
        LDR      r1,[r5,#-0xff0]
        STR      r1,[r4,#0x10]  ; enabledIntMask
        MVN      r1,#0
        STR      r1,[r5,#-0xfec]
        MOV      r1,#1
        STRB     r1,[r4,#0]  ; isInterruptMaskSaved
|L1.636|
        MOV      r1,#0x900
        ADD      r1,r1,#0x3d0000
        STR      r1,[sp,#0]
        MOV      r3,r2
        MOV      r1,r0
        MOV      r2,r12
        MOV      r0,#0x33
        BL       iap
        LDRB     r1,[r4,#0]  ; isInterruptMaskSaved
        CMP      r1,#1
        POPNE    {r3-r5,lr}
        BXNE     lr
        LDR      r1,[r4,#0x10]  ; enabledIntMask
        STR      r1,[r5,#-0xff0]
        STRB     r5,[r4,#0]  ; isInterruptMaskSaved
        POP      {r3-r5,lr}
        BX       lr
        ENDP

blank_check_sector PROC
        MOV      r2,r1
        PUSH     {r3,lr}
        MOV      r1,#0
        MOV      r3,r1
        STR      r1,[sp,#0]
        MOV      r1,r0
        MOV      r0,#0x35
        BL       iap
        POP      {r3,lr}
        BX       lr
        ENDP

flashWriteBlock PROC
        PUSH     {r3-r7,lr}
        MOV      r5,r1
        MOV      r6,r0
        BL       getSectorNumber
        AND      r4,r0,#0xff
        CMP      r4,#0xff
        BEQ      |L1.996|
        SUB      r0,r4,#4
        CMP      r0,#0xb
        BCC      |L1.792|
        CMP      r4,#3
        BNE      |L1.996|
|L1.792|
        MOV      r7,#0
        MOV      r2,r4
        MOV      r3,r7
        MOV      r1,r2
        MOV      r0,#0x35
        STR      r7,[sp,#0]
        BL       iap
        MOV      r2,r4
        MOV      r3,#0
        MOV      r1,r2
        MOV      r0,#0x32
        STR      r7,[sp,#0]
        BL       iap
        TST      r0,#0xff
        BNE      |L1.996|
        LDR      r4,|L1.2676|
        MOV      r3,#0x100
        LDRB     r0,[r4,#0]  ; isInterruptMaskSaved
        CMP      r0,#0
        BNE      |L1.896|
        LDR      r0,[r7,#-0xff0]
        STR      r0,[r4,#0x10]  ; enabledIntMask
        MVN      r0,#0
        STR      r0,[r7,#-0xfec]
        MOV      r0,#1
        STRB     r0,[r4,#0]  ; isInterruptMaskSaved
|L1.896|
        MOV      r0,#0x900
        ADD      r0,r0,#0x3d0000
        STR      r0,[sp,#0]
        MOV      r2,r5
        MOV      r1,r6
        MOV      r0,#0x33
        BL       iap
        LDRB     r1,[r4,#0]  ; isInterruptMaskSaved
        CMP      r1,#1
        BNE      |L1.948|
        LDR      r1,[r4,#0x10]  ; enabledIntMask
        STR      r1,[r7,#-0xff0]
        STRB     r7,[r4,#0]  ; isInterruptMaskSaved
|L1.948|
        TST      r0,#0xff
        BNE      |L1.996|
        MOV      r3,#0x100
        MOV      r2,r5
        MOV      r1,r6
        MOV      r0,#0x38
        STR      r7,[sp,#0]
        BL       iap
        TST      r0,#0xff
        POPEQ    {r3-r7,lr}
        MOVEQ    r0,#1
        BXEQ     lr
|L1.996|
        POP      {r3-r7,lr}
        MOV      r0,#0
        BX       lr
        ENDP

writeFlashData PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r2
        MOV      r4,r1
        MOV      r6,r0
        LDR      r0,|L1.2680|
        MOV      r2,#0xff
        MOV      r1,#0x100
        BL       __aeabi_memset
        CMP      r5,#0
        LDRHI    r12,|L1.2680|
        MOV      r3,#0
        BLS      |L1.1076|
|L1.1056|
        LDRB     r0,[r4,r3]
        STRB     r0,[r12,r3]
        ADD      r3,r3,#1
        CMP      r5,r3
        BHI      |L1.1056|
|L1.1076|
        MOV      r0,r6
        POP      {r4-r6,lr}
        LDR      r1,|L1.2680|
        MOV      r2,#0x100
        B        flashWriteBlock
        ENDP

erase_sectors PROC
        PUSH     {r3-r7,lr}
        LDR      r4,|L1.2676|
        MOV      r7,r0
        LDRB     r0,[r4,#0]  ; isInterruptMaskSaved
        MOV      r6,r1
        MOV      r5,#0
        CMP      r0,#0
        BNE      |L1.1152|
        LDR      r0,[r5,#-0xff0]
        STR      r0,[r4,#0x10]  ; enabledIntMask
        MVN      r0,#0
        STR      r0,[r5,#-0xfec]
        MOV      r0,#1
        STRB     r0,[r4,#0]  ; isInterruptMaskSaved
|L1.1152|
        MOV      r2,r1
        MOV      r3,#0
        MOV      r1,r7
        MOV      r0,#0x32
        STR      r5,[sp,#0]
        BL       iap
        CMP      r0,#0
        BNE      |L1.1212|
        MOV      r3,#0x900
        ADD      r3,r3,#0x3d0000
        MOV      r2,r6
        MOV      r1,r7
        MOV      r0,#0x34
        STR      r5,[sp,#0]
        BL       iap
|L1.1212|
        LDRB     r1,[r4,#0]  ; isInterruptMaskSaved
        CMP      r1,#1
        POPNE    {r3-r7,lr}
        BXNE     lr
        LDR      r1,[r4,#0x10]  ; enabledIntMask
        STR      r1,[r5,#-0xff0]
        STRB     r5,[r4,#0]  ; isInterruptMaskSaved
        POP      {r3-r7,lr}
        BX       lr
        ENDP

flashrom_erase PROC
        PUSH     {r3-r5,lr}
        BL       getSectorNumber
        AND      r4,r0,#0xff
        CMP      r4,#0xff
        BEQ      |L1.1388|
        MOV      r5,#0
        MOV      r2,r4
        MOV      r3,r5
        MOV      r1,r2
        MOV      r0,#0x35
        STR      r5,[sp,#0]
        BL       iap
        CMP      r0,#0
        BEQ      |L1.1400|
        MOV      r2,r4
        MOV      r3,#0
        MOV      r1,r2
        MOV      r0,#0x32
        STR      r5,[sp,#0]
        BL       iap
        CMP      r0,#0
        BNE      |L1.1388|
        MOV      r1,r4
        MOV      r0,r1
        BL       erase_sectors
        CMP      r0,#0
        BNE      |L1.1388|
        MOV      r2,r4
        MOV      r3,#0
        MOV      r1,r2
        MOV      r0,#0x35
        STR      r5,[sp,#0]
        BL       iap
        CMP      r0,#0
        BEQ      |L1.1400|
|L1.1388|
        POP      {r3-r5,lr}
        MOV      r0,#0
        BX       lr
|L1.1400|
        POP      {r3-r5,lr}
        MOV      r0,#1
        BX       lr
        ENDP

readCodeCrc32 PROC
        MOV      r0,#0xc
        ADD      r0,r0,#0x3000
        LDR      r0,[r0,#0]
        BIC      r1,r1,#0xff
        LSL      r2,r0,#8
        LSR      r2,r2,#24
        ORR      r1,r1,r0,LSR #24
        LSL      r2,r2,#8
        BIC      r1,r1,#0xff00
        AND      r2,r2,#0xff00
        ORR      r1,r1,r2
        LSL      r2,r0,#16
        LSR      r2,r2,#24
        LSL      r2,r2,#16
        BIC      r1,r1,#0xff0000
        AND      r2,r2,#0xff0000
        ORR      r1,r1,r2
        BIC      r1,r1,#0xff000000
        ORR      r0,r1,r0,LSL #24
        BX       lr
        ENDP

readCodeSize PROC
        MOV      r0,#8
        ADD      r0,r0,#0x3000
        LDR      r0,[r0,#0]
        BIC      r1,r1,#0xff
        LSL      r2,r0,#8
        LSR      r2,r2,#24
        ORR      r1,r1,r0,LSR #24
        LSL      r2,r2,#8
        BIC      r1,r1,#0xff00
        AND      r2,r2,#0xff00
        ORR      r1,r1,r2
        LSL      r2,r0,#16
        LSR      r2,r2,#24
        LSL      r2,r2,#16
        BIC      r1,r1,#0xff0000
        AND      r2,r2,#0xff0000
        ORR      r1,r1,r2
        BIC      r1,r1,#0xff000000
        ORR      r0,r1,r0,LSL #24
        BX       lr
        ENDP

readCodeUpgradeFlag PROC
        MOV      r0,#0x3000
        LDRB     r0,[r0,#0]
        BX       lr
        ENDP

readCodeDeviceId PROC
        MOV      r0,#4
        ADD      r0,r0,#0x3000
        LDRB     r0,[r0,#0]
        BX       lr
        ENDP

getUpgradeStatusFlag PROC
        MOV      r0,#0x3000
        LDR      r0,[r0,#0]
        BIC      r1,r1,#0xff
        LSL      r2,r0,#8
        LSR      r2,r2,#24
        ORR      r1,r1,r0,LSR #24
        LSL      r2,r2,#8
        BIC      r1,r1,#0xff00
        AND      r2,r2,#0xff00
        ORR      r1,r1,r2
        LSL      r2,r0,#16
        LSR      r2,r2,#24
        LSL      r2,r2,#16
        BIC      r1,r1,#0xff0000
        AND      r2,r2,#0xff0000
        ORR      r1,r1,r2
        BIC      r1,r1,#0xff000000
        ORR      r0,r1,r0,LSL #24
        BX       lr
        ENDP

eraseUpgradeFlagSector PROC
        MOV      r1,#3
        MOV      r0,r1
        B        erase_sectors
        ENDP

writeUpgradeCompleteFlag PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r1,#3
        MOV      r0,r1
        BL       erase_sectors
        LDR      r0,|L1.2680|
        MOV      r2,#0xff
        MOV      r1,#0x100
        BL       __aeabi_memset
        LDR      r1,|L1.2680|
        LDR      r3,|L1.2676|
        STRB     r4,[r1,#0]  ; blockData
        LDRB     r0,[r3,#4]  ; targetId
        STRB     r0,[r1,#4]  ; blockData
        LDR      r0,[r3,#8]  ; codeSize
        LSR      r2,r0,#24
        STRB     r2,[r1,#8]  ; blockData
        LSR      r2,r0,#16
        STRB     r2,[r1,#9]  ; blockData
        LSR      r2,r0,#8
        STRB     r2,[r1,#0xa]  ; blockData
        STRB     r0,[r1,#0xb]  ; blockData
        LDR      r0,[r3,#0xc]  ; codeCrc32
        LSR      r2,r0,#24
        STRB     r2,[r1,#0xc]  ; blockData
        LSR      r2,r0,#16
        STRB     r2,[r1,#0xd]  ; blockData
        LSR      r2,r0,#8
        STRB     r2,[r1,#0xe]  ; blockData
        STRB     r0,[r1,#0xf]  ; blockData
        POP      {r4,lr}
        MOV      r2,#0x100
        MOV      r0,#0x3000
        B        flashWriteBlock
        ENDP

upgradeCodePresent PROC
        PUSH     {r4,lr}
        MOV      r0,#0x3000
        LDRB     r0,[r0,#0]
        CMP      r0,#0xaa
        POPNE    {r4,lr}
        MOVNE    r0,#0
        BXNE     lr
        MOV      r0,#8
        ADD      r0,r0,#0x3000
        LDR      r0,[r0,#0]
        BIC      r1,r1,#0xff
        LSL      r2,r0,#8
        LSR      r2,r2,#24
        ORR      r1,r1,r0,LSR #24
        LSL      r2,r2,#8
        BIC      r1,r1,#0xff00
        AND      r2,r2,#0xff00
        ORR      r1,r1,r2
        LSL      r2,r0,#16
        LSR      r2,r2,#24
        LSL      r2,r2,#16
        BIC      r1,r1,#0xff0000
        AND      r2,r2,#0xff0000
        ORR      r1,r1,r2
        LDR      r2,|L1.2676|
        BIC      r1,r1,#0xff000000
        ORR      r0,r1,r0,LSL #24
        STR      r0,[r2,#8]  ; codeSize
        MOV      r0,#0xc
        ADD      r0,r0,#0x3000
        LDR      r0,[r0,#0]
        BIC      r1,r1,#0xff
        LSL      r3,r0,#8
        LSR      r3,r3,#24
        ORR      r1,r1,r0,LSR #24
        LSL      r3,r3,#8
        BIC      r1,r1,#0xff00
        AND      r3,r3,#0xff00
        ORR      r1,r1,r3
        LSL      r3,r0,#16
        LSR      r3,r3,#24
        LSL      r3,r3,#16
        BIC      r1,r1,#0xff0000
        AND      r3,r3,#0xff0000
        ORR      r1,r1,r3
        BIC      r1,r1,#0xff000000
        ORR      r0,r1,r0,LSL #24
        STR      r0,[r2,#0xc]  ; codeCrc32
        MOV      r0,#4
        ADD      r0,r0,#0x3000
        LDRB     r0,[r0,#0]
        CMP      r0,#5
        STR      r0,[r2,#4]  ; targetId
        POPEQ    {r4,lr}
        MOVEQ    r0,#1
        BXEQ     lr
        MOV      r0,#0x11
        BL       writeUpgradeCompleteFlag
        POP      {r4,lr}
        MOV      r0,#0
        BX       lr
        ENDP

writeUpgradeFlag PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r1
        MOV      r6,r0
        MOV      r1,#3
        MOV      r4,r2
        MOV      r0,r1
        BL       erase_sectors
        LDR      r0,|L1.2680|
        MOV      r2,#0xff
        MOV      r1,#0x100
        BL       __aeabi_memset
        LDR      r1,|L1.2680|
        MOV      r2,#0xaa
        STRB     r2,[r1,#0]  ; blockData
        LSR      r0,r5,#24
        STRB     r6,[r1,#4]  ; blockData
        STRB     r0,[r1,#8]  ; blockData
        LSR      r0,r5,#16
        STRB     r0,[r1,#9]  ; blockData
        LSR      r0,r5,#8
        STRB     r0,[r1,#0xa]  ; blockData
        LSR      r0,r4,#24
        STRB     r5,[r1,#0xb]  ; blockData
        STRB     r0,[r1,#0xc]  ; blockData
        LSR      r0,r4,#16
        STRB     r0,[r1,#0xd]  ; blockData
        LSR      r0,r4,#8
        STRB     r0,[r1,#0xe]  ; blockData
        STRB     r4,[r1,#0xf]  ; blockData
        POP      {r4-r6,lr}
        MOV      r2,#0x100
        MOV      r0,#0x3000
        B        flashWriteBlock
        ENDP

iapGetBlockAddress PROC
        AND      r0,r0,#0xff
        PUSH     {lr}
        BL       getSectorAddress
        POP      {lr}
        ADD      r0,r0,r1,LSL #8
        BX       lr
        ENDP

writeTestSector PROC
        PUSH     {r4-r6,lr}
        MOV      r0,#0xb
        BL       getSectorAddress
        LDR      r5,|L1.2680|
        MOV      r0,#0
|L1.2244|
        STRB     r0,[r5,r0]
        ADD      r0,r0,#1
        CMP      r0,#0x100
        BLT      |L1.2244|
        MOV      r4,#0
|L1.2264|
        BIC      r1,r4,#0xff0000
        MOV      r0,#0xb
        STRB     r4,[r5,#0]  ; blockData
        BL       getSectorAddress
        ADD      r0,r0,r1,LSL #8
        LDR      r1,|L1.2680|
        MOV      r2,#0x100
        BL       flashWriteBlock
        ADD      r4,r4,#1
        CMP      r4,#0xf
        BLT      |L1.2264|
        POP      {r4-r6,lr}
        BX       lr
        ENDP

copySectorData PROC
        PUSH     {r4-r6,lr}
        LDR      r3,|L1.2684|
        MOV      r6,r1
        MOV      r2,#0
|L1.2332|
        LDR      r12,[r0,r2,LSL #2]
        STR      r12,[r3,r2,LSL #2]
        ADD      r2,r2,#1
        BIC      r2,r2,#0x10000
        CMP      r2,#0x40
        BCC      |L1.2332|
        LDR      r4,|L1.2684|
        MOV      r5,#0x100
        MOV      r2,#0xff
        MOV      r1,r5
        SUB      r0,r4,#0x100
        BL       __aeabi_memset
        MOV      r2,#0
        SUB      r3,r4,#0x100
|L1.2388|
        LDRB     r0,[r4,r2]
        STRB     r0,[r3,r2]
        ADD      r2,r2,#1
        CMP      r2,r5
        BCC      |L1.2388|
        LDR      r1,|L1.2680|
        MOV      r2,#0x100
        MOV      r0,r6
        BL       flashWriteBlock
        POP      {r4-r6,lr}
        MOV      r0,#1
        BX       lr
        ENDP

eraseUpgradeSectors PROC
        PUSH     {r4,lr}
        MOV      r1,#0xe
        MOV      r0,#0xb
        BL       erase_sectors
        CMP      r0,#0
        BNE      |L1.2488|
        MOV      r1,#3
        MOV      r0,r1
        BL       erase_sectors
        CMP      r0,#0
        POPEQ    {r4,lr}
        MOVEQ    r0,#1
        BXEQ     lr
|L1.2488|
        POP      {r4,lr}
        MOV      r0,#0
        BX       lr
        ENDP

eraseCodeSectors PROC
        PUSH     {r4,lr}
        MOV      r1,#0xa
        MOV      r0,#4
        BL       erase_sectors
        POP      {r4,lr}
        TST      r0,#0xff
        MOVEQ    r0,#1
        MOVNE    r0,#0
        BX       lr
        ENDP

iapTestWriteApplicationCode PROC
        PUSH     {r4-r8,lr}
        MOV      r1,#0xb
        MOV      r6,#0x20000
        MOV      r0,r1
        BL       erase_sectors
        LDR      r0,|L1.2680|
        MOV      r2,#0xa5
        MOV      r1,#0x100
        BL       __aeabi_memset
        LDR      r8,|L1.2680|
        MOV      r4,#0
|L1.2580|
        LDR      r5,|L1.2680|
        MOV      r7,#0x100
        MOV      r2,#0xff
        MOV      r1,r7
        ADD      r0,r5,#0
        STRB     r4,[r8,#0]  ; blockData
        BL       __aeabi_memset
        MOV      r1,#0
|L1.2612|
        LDRB     r0,[r5,r1]
        STRB     r0,[r8,r1]
        ADD      r1,r1,#1
        CMP      r1,r7
        BCC      |L1.2612|
        LDR      r1,|L1.2680|
        MOV      r2,#0x100
        MOV      r0,r6
        BL       flashWriteBlock
        ADD      r1,r4,#1
        BIC      r4,r1,#0x10000
        CMP      r4,#0x80
        ADD      r6,r6,#0x100
        BCC      |L1.2580|
        POP      {r4-r8,lr}
        BX       lr
|L1.2676|
        DCD      ||.data||
|L1.2680|
        DCD      ||.bss||
|L1.2684|
        DCD      ||.bss||+0x100
        ENDP

iap PROC
        PUSH     {r4,lr}
        LDR      r12,|L1.2740|
        LDR      r4,[sp,#8]
        STM      r12,{r0-r4}
        LDR      r1,|L1.2744|
        ADD      r0,r12,#0
        MVN      r2,#0x8000000e
        MOV      lr,pc
        BX       r2
        LDR      r0,|L1.2744|
        LDR      r0,[r0,#0]  ; iap_result
        POP      {r4,lr}
        BX       lr
        ENDP

|L1.2740|
        DCD      ||.bss||+0x200
|L1.2744|
        DCD      ||.data||+0x14

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

blockData
        %        256
blockUint32Data
        %        256
iap_command
        %        20

        AREA ||.data||, DATA, ALIGN=2

isInterruptMaskSaved
        DCB      0x00,0x00,0x00,0x00
targetId
        DCD      0x00000000
codeSize
        DCD      0x00000000
codeCrc32
        DCD      0x00000000
enabledIntMask
        DCD      0x00000000
iap_result
        %        8

        AREA ||area_number.6||, DATA, ALIGN=2

        EXPORTAS ||area_number.6||, ||.data||
sectorAddresses
        DCD      0x00000000
        DCD      0x00001000
        DCD      0x00002000
        DCD      0x00003000
        DCD      0x00004000
        DCD      0x00005000
        DCD      0x00006000
        DCD      0x00007000
        DCD      0x00008000
        DCD      0x00010000
        DCD      0x00018000
        DCD      0x00020000
        DCD      0x00028000
        DCD      0x00030000
        DCD      0x00038000

        AREA ||area_number.7||, DATA, ALIGN=2

        EXPORTAS ||area_number.7||, ||.data||
IAP_Entry
        DCD      0x00000000

        EXPORT swapUint16 [CODE]
        EXPORT swapUint32 [CODE]
        EXPORT convertByteToUint32 [CODE]
        EXPORT getSectorAddress [CODE]
        EXPORT getSectorSize [CODE]
        EXPORT getSectorNumber [CODE]
        EXPORT compare [CODE]
        EXPORT copy_ram_to_flash [CODE]
        EXPORT blank_check_sector [CODE]
        EXPORT writeFlashData [CODE]
        EXPORT erase_sectors [CODE]
        EXPORT flashrom_erase [CODE]
        EXPORT readCodeCrc32 [CODE]
        EXPORT readCodeSize [CODE]
        EXPORT readCodeUpgradeFlag [CODE]
        EXPORT readCodeDeviceId [CODE]
        EXPORT getUpgradeStatusFlag [CODE]
        EXPORT eraseUpgradeFlagSector [CODE]
        EXPORT writeUpgradeCompleteFlag [CODE]
        EXPORT upgradeCodePresent [CODE]
        EXPORT writeUpgradeFlag [CODE]
        EXPORT iapGetBlockAddress [CODE]
        EXPORT writeTestSector [CODE]
        EXPORT copySectorData [CODE]
        EXPORT eraseUpgradeSectors [CODE]
        EXPORT eraseCodeSectors [CODE]
        EXPORT iapTestWriteApplicationCode [CODE]
        EXPORT sectorAddresses [DATA,SIZE=60]
        EXPORT IAP_Entry [DATA,SIZE=4]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_memset [CODE]

        KEEP ||__switch$$||
        KEEP flashWriteBlock
        KEEP iap
        KEEP blockData
        KEEP blockUint32Data
        KEEP iap_command
        KEEP isInterruptMaskSaved
        KEEP targetId
        KEEP codeSize
        KEEP codeCrc32
        KEEP enabledIntMask
        KEEP iap_result

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,2
        ATTR SETVALUE Tag_ABI_optimization_goals,2
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
