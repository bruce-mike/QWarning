; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --debug -c --asm -o.\objs\adc.o --depend=.\objs\adc.d --apcs=interwork -Otime --diag_suppress=9931 -IC:\Keil\ARM\INC\Phillips -I..\SharedCode -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --enum_is_int --omf_browse=.\objs\adc.crf adc.c]
        ARM
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

ADC0Handler PROC
        PUSH     {r0-r5,r12,lr}
        MOV      r5,#0x34000
        ADD      r5,r5,#0xe0000000
        LDR      r4,[r5,#0x30]
        TST      r4,#0xff00
        BEQ      |L1.72|
        ADR      r0,|L1.248|
        BL       __2printf
        LSL      r0,r4,#16
        LSR      r4,r0,#24
        CMP      r4,#1
        LDREQ    r4,[r5,#0x10]
        BEQ      |L1.72|
        CMP      r4,#2
        LDREQ    r4,[r5,#0x14]
        BEQ      |L1.72|
        CMP      r4,#4
        LDREQ    r4,[r5,#0x18]
|L1.72|
        LDR      r1,|L1.264|
        TST      r4,#0x10000
        BEQ      |L1.208|
        LDR      r2,|L1.268|
        AND      r0,r4,#0xff
        CMP      r0,#1
        BEQ      |L1.120|
        CMP      r0,#2
        BEQ      |L1.152|
        CMP      r0,#4
        BEQ      |L1.180|
        B        |L1.208|
|L1.120|
        LDR      r0,[r5,#0x10]
        LSL      r0,r0,#16
        LSR      r0,r0,#22
        STR      r0,[r2,#0]  ; ADC0Value
        LDRB     r0,[r1,#0]  ; adcDone
        ORR      r0,r0,#1
        STRB     r0,[r1,#0]  ; adcDone
        B        |L1.208|
|L1.152|
        LDR      r0,[r5,#0x14]
        LSL      r0,r0,#16
        LSR      r0,r0,#22
        STR      r0,[r2,#4]  ; ADC0Value
        LDRB     r0,[r1,#0]  ; adcDone
        ORR      r0,r0,#2
        B        |L1.204|
|L1.180|
        LDR      r0,[r5,#0x18]
        LSL      r0,r0,#16
        LSR      r0,r0,#22
        STR      r0,[r2,#8]  ; ADC0Value
        LDRB     r0,[r1,#0]  ; adcDone
        ORR      r0,r0,#4
|L1.204|
        STRB     r0,[r1,#0]  ; adcDone
|L1.208|
        LDRB     r0,[r1,#0]  ; adcDone
        ORR      r0,r0,#0x80
        STRB     r0,[r1,#0]  ; adcDone
        LDR      r0,[r5,#0]
        BIC      r0,r0,#0x7000000
        STR      r0,[r5,#0]
        MOV      r0,#0
        STR      r0,[r0,#-0x100]
        POP      {r0-r5,r12,lr}
        SUBS     pc,lr,#4
|L1.248|
        DCB      "ADC Overrun\n",0
        DCB      0
        DCB      0
        DCB      0
|L1.264|
        DCD      ||.data||+0x3
|L1.268|
        DCD      ||.bss||
        ENDP

ADCInit PROC
        PUSH     {r4-r6,lr}
        LDR      r0,|L1.456|
        BL       initTimer
        LDR      r0,|L1.268|
        MOV      r4,#0
        STR      r4,[r0,#0]  ; ADC0Value
        STR      r4,[r0,#4]  ; ADC0Value
        STR      r4,[r0,#8]  ; ADC0Value
        LDR      r5,|L1.460|
        STRB     r4,[r5,#3]  ; adcDone
        ADD      r0,r5,#0xc
        BL       __ARM_common_memclr2_8
        ADD      r0,r5,#0x14
        BL       __ARM_common_memclr2_8
        MOV      r0,#0
        MOV      r1,#0x2d0
        ADD      r2,r5,#4
        STRB     r4,[r5,#0]  ; batteryInfo
|L1.344|
        ADD      r3,r2,r0,LSL #1
        ADD      r0,r0,#1
        AND      r0,r0,#0xff
        CMP      r0,#4
        STRH     r1,[r3,#0]
        BCC      |L1.344|
        MOV      r0,#0x1fc000
        ADD      r0,r0,#0xe0000000
        LDR      r1,[r0,#0xc4]
        ORR      r1,r1,#0x1000
        STR      r1,[r0,#0xc4]
        LDR      r1,|L1.464|
        SUB      r0,r0,#0x1c8000
        STR      r1,[r0,#0]
        MOV      r1,#7
        STR      r1,[r0,#0xc]
        LDR      r1,|L1.468|
        MOV      r2,#1
        MOV      r0,#0x12
        BL       install_irq
        CMP      r0,#0
        ADREQ    r0,|L1.472|
        BLEQ     __2printf
        POP      {r4-r6,lr}
        MOV      r1,#0x4d
        LDR      r0,|L1.456|
        ADD      r1,r1,#0x100
        B        startTimer
|L1.456|
        DCD      ||.data||+0x1c
|L1.460|
        DCD      ||.data||
|L1.464|
        DCD      0x00200801
|L1.468|
        DCD      ADC0Handler
|L1.472|
        DCB      "ADC_INT: Failed to Install!\n",0
        DCB      0
        DCB      0
        DCB      0
        ENDP

ADCGetBatteryVoltage PROC
        LDR      r3,|L1.1076|
        MOV      r0,#0
        PUSH     {r4,lr}
        MOV      r1,#4
        MOV      r2,r0
|L1.524|
        ADD      r12,r3,r2,LSL #1
        LDRH     r12,[r12,#0]
        ADD      r2,r2,#1
        BIC      r2,r2,#0x10000
        ADD      r0,r0,r12
        CMP      r2,r1
        BIC      r0,r0,#0x10000
        BCC      |L1.524|
        BL       __aeabi_uidivmod
        ADD      r1,r0,r0,LSL #5
        ADD      r1,r1,r1,LSL #3
        RSB      r0,r0,r1,LSL #4
        ADD      r0,r0,#0x9000
        POP      {r4,lr}
        ADD      r0,r0,#0xe6
        LSR      r0,r0,#8
        BIC      r0,r0,#0xff0000
        BX       lr
        ENDP

getBatteryOperatingStatus PROC
        PUSH     {r4,lr}
        MOV      r4,#0
        LDR      r3,|L1.1076|
        MOV      r1,#4
        MOV      r0,r4
        MOV      r2,r4
|L1.620|
        ADD      r12,r3,r2,LSL #1
        LDRH     r12,[r12,#0]
        ADD      r2,r2,#1
        BIC      r2,r2,#0x10000
        ADD      r0,r0,r12
        CMP      r2,r1
        BIC      r0,r0,#0x10000
        BCC      |L1.620|
        BL       __aeabi_uidivmod
        ADD      r1,r0,r0,LSL #5
        ADD      r1,r1,r1,LSL #3
        RSB      r0,r0,r1,LSL #4
        ADD      r0,r0,#0x9000
        ADD      r0,r0,#0xe6
        LSR      r0,r0,#8
        MOV      r1,#0xee0
        BIC      r0,r0,#0xff0000
        ADD      r1,r1,#0x2000
        CMP      r0,r1
        MOVCC    r1,#0x100
        MOVCS    r1,#0
        ORR      r2,r1,r4
        MOV      r1,#0xd50
        ADD      r1,r1,#0x2000
        CMP      r0,r1
        MOVCC    r1,#1
        MOVCS    r1,#0
        CMP      r0,#0x2bc0
        POP      {r4,lr}
        ORR      r1,r1,r2
        MOVCC    r0,#2
        MOVCS    r0,#0
        ORR      r0,r0,r1
        BX       lr
        ENDP

ADCDoWork PROC
        PUSH     {r4-r6,lr}
        LDR      r1,|L1.264|
        LDRB     r0,[r1,#0]  ; adcDone
        MOV      r5,#1
        SUB      r4,r1,#3
        TST      r0,#0x80
        BEQ      |L1.984|
        LDRB     r0,[r1,#0]  ; adcDone
        BIC      r0,r0,#0x80
        STRB     r0,[r1,#0]  ; adcDone
        LDRB     r0,[r1,#0]  ; adcDone
        LDRB     r2,[r1,#0]  ; adcDone
        LDR      r12,|L1.268|
        TST      r0,#1
        ADD      r0,r4,#0
        LDRB     r0,[r0,#2]
        BEQ      |L1.856|
        BIC      r2,r2,#1
        STRB     r2,[r1,#0]  ; adcDone
        LDR      r1,[r12,#0]  ; ADC0Value
        ADD      r2,r4,#4
        ADD      r0,r2,r0,LSL #1
        STRH     r1,[r0,#0]
        STRB     r5,[r4,#1]  ; nChannelNum
        B        |L1.984|
|L1.856|
        TST      r2,#2
        LDRB     r2,[r1,#0]  ; adcDone
        BEQ      |L1.904|
        BIC      r2,r2,#2
        STRB     r2,[r1,#0]  ; adcDone
        LDR      r1,[r12,#4]  ; ADC0Value
        LDR      r2,|L1.1080|
        ADD      r0,r2,r0,LSL #1
        STRH     r1,[r0,#0]
        MOV      r0,#2
        STRB     r0,[r4,#1]  ; nChannelNum
        B        |L1.984|
|L1.904|
        TST      r2,#4
        MOV      r2,#0
        BEQ      |L1.972|
        LDRB     r3,[r1,#0]  ; adcDone
        BIC      r3,r3,#4
        STRB     r3,[r1,#0]  ; adcDone
        LDR      r1,[r12,#8]  ; ADC0Value
        LDR      r3,|L1.1084|
        ADD      r3,r3,r0,LSL #1
        ADD      r0,r0,#1
        AND      r0,r0,#0xff
        STRH     r1,[r3,#0]
        CMP      r0,#4
        STRB     r0,[r4,#2]  ; index
        STRBCS   r2,[r4,#2]  ; index
        STRB     r2,[r4,#1]  ; nChannelNum
        B        |L1.984|
|L1.972|
        ADR      r0,|L1.1088|
        STRB     r2,[r4,#1]  ; nChannelNum
        BL       __2printf
|L1.984|
        LDR      r0,|L1.456|
        BL       isTimerExpired
        CMP      r0,#0
        POPEQ    {r4-r6,lr}
        BXEQ     lr
        LDRB     r0,[r4,#1]  ; nChannelNum
        MOV      r1,#0x34000
        ADD      r1,r1,#0xe0000000
        LDR      r2,[r1,#0]
        CMP      r0,#3
        MOVHI    r0,#0
        BIC      r2,r2,#0xff
        STR      r2,[r1,#0]
        LDR      r2,[r1,#0]
        LSL      r0,r5,r0
        ORR      r0,r0,#0x1000000
        ORR      r0,r0,r2
        STR      r0,[r1,#0]
        POP      {r4-r6,lr}
        MOV      r1,#0x4d
        LDR      r0,|L1.456|
        ADD      r1,r1,#0x100
        B        startTimer
|L1.1076|
        DCD      ||.data||+0x4
|L1.1080|
        DCD      ||.data||+0xc
|L1.1084|
        DCD      ||.data||+0x14
|L1.1088|
        DCB      "ADCDoWork: Unknown done\n\r",0
        DCB      0
        DCB      0
        ENDP

ADCGetRssiVoltage PROC
        LDR      r3,|L1.1080|
        MOV      r0,#0
        PUSH     {r4,lr}
        MOV      r1,#4
        MOV      r2,r0
|L1.1136|
        ADD      r12,r3,r2,LSL #1
        LDRH     r12,[r12,#0]
        ADD      r2,r2,#1
        BIC      r2,r2,#0x10000
        ADD      r0,r0,r12
        CMP      r2,r1
        BIC      r0,r0,#0x10000
        BCC      |L1.1136|
        BL       __aeabi_uidivmod
        POP      {r4,lr}
        BX       lr
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

ADC0Value
        %        12

        AREA ||.data||, DATA, ALIGN=2

batteryInfo
        DCB      0x00
nChannelNum
        DCB      0x01
index
        DCB      0x00
adcDone
        DCB      0x00
arrayChan0
        %        8
arrayChan1
        %        8
arrayChan2
        %        8
adcSampleTimer
        %        8

        AREA ||i.__ARM_common_memclr2_8||, COMGROUP=__ARM_common_memclr2_8, CODE, READONLY, ALIGN=2

__ARM_common_memclr2_8 PROC
        MOV      r1,#0
        STRH     r1,[r0,#0]
        STRH     r1,[r0,#2]
        STRH     r1,[r0,#4]
        STRH     r1,[r0,#6]
        BX       lr
        ENDP


        EXPORT ADCInit [CODE]
        EXPORT ADCGetBatteryVoltage [CODE]
        EXPORT getBatteryOperatingStatus [CODE]
        EXPORT ADCDoWork [CODE]
        EXPORT ADCGetRssiVoltage [CODE]
        EXPORT __ARM_common_memclr2_8 [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __2printf [CODE]
        IMPORT initTimer [CODE]
        IMPORT install_irq [CODE]
        IMPORT startTimer [CODE]
        IMPORT __aeabi_uidivmod [CODE]
        IMPORT isTimerExpired [CODE]

        KEEP ADC0Handler
        KEEP ADC0Value
        KEEP batteryInfo
        KEEP nChannelNum
        KEEP index
        KEEP adcDone
        KEEP arrayChan0
        KEEP arrayChan1
        KEEP arrayChan2
        KEEP adcSampleTimer

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,2
        ATTR SETVALUE Tag_ABI_optimization_goals,2
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
