#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "shareddefs.h"
#include "sharedinterface.h"
#include "queue.h"
#include "timer.h"
#include "PCU.h"
#include "pwm.h"
#include "pcuCommands.h"
#include "mischardware.h"
#include "display.h"
#include "actuator.h"
#include "lm73.h"
#include "adc.h"
#include "errorinput.h"
#include "leddriver.h"
#include "flash_nvol.h"
#include "spiFlash.h"
#include "storedconfig.h"
#include "watchdog.h"

void pcuCommandProcessor(eINTERFACE eInterface, PCUPACKET *pPCUPacket)
{
	int nCommandEnum;
	PCUSTATUS pStatus;
	
	do
	{			
				/////
				// so process the command
				/////
				nCommandEnum = pPCUPacket->nPayLoad;
				switch(nCommandEnum)
				{
							case ePCUCOMMAND_GET_MODEL_TYPE:
								{
									pPCUPacket->nPayLoad = getModelNumber();
									pcuSendResponse(eInterface, pPCUPacket);
								}
								break;
								
							case ePCUCOMMAND_GET_ALL_STATUS:
								pStatus.Row0Status 			= 1; 		
								pStatus.Row1Status 			= 0;  		
								pStatus.Row2Status 			= 1;		
								pStatus.Row3Status 			= 0; 		
								pStatus.Fan0Status 			= 1; 		
								pStatus.Fan1Status 			= 0; 		
								pStatus.GPSStatus  			= 1; 		
								pStatus.ModemStatus 		= 1;		
								pStatus.CompsStatus 		= 0;		
								pStatus.RDRStatus   		= 1;		
								pStatus.Aux0Status  		= 0;		
								pStatus.Aux1Status  		= 1;		
								pStatus.SolarFault  		= 0;		
								pStatus.BatteryFault 		= 1;		
								pStatus.OVDisable		 		= 0;	
								pStatus.SolarEnabled 	 	= 1;	
								pStatus.BatteryEnabled 	= 0;
								pStatus.SolarReversed  	= 1;
								pStatus.BatteryReversed	= 0;
								pPCUPacket->nPayLoad = 0x45;
								pPCUPacket->nCheckSum = 0x05;
								pcuSendResponse(eInterface, pPCUPacket);
								break;
							
							case ePCUCOMMAND_GET_ALL_ALARMS:
								{
									pPCUPacket->nPayLoad = errorInputGetAlarms();
									pcuSendResponse(eInterface, pPCUPacket);
								}
								break;
							case ePCUCOMMAND_GET_LINE_VOLTAGE:
								{
									pPCUPacket->nPayLoad = ADCGetLineVoltage();
									pcuSendResponse(eInterface, pPCUPacket);
								}
								break;
							case ePCUCOMMAND_GET_BATTERY_VOLTAGE:
								{
									pPCUPacket->nPayLoad = ADCGetBatteryVoltage();
									pcuSendResponse(eInterface, pPCUPacket);
								}
								break;
							case ePCUCOMMAND_GET_AUX0_STATUS:
								{
									pPCUPacket->nPayLoad = ledDriverGetAuxStatus();
									pcuSendResponse(eInterface, pPCUPacket);
								}
								break;
							case ePCUCOMMAND_GET_AUX_ERRORS:
								{
									pPCUPacket->nPayLoad = errorInputGetAuxErrors();
									pcuSendResponse(eInterface, pPCUPacket);
								}
								break;
								
							case ePCUCOMMAND_GET_SWITCH_DATA:
								{
									pPCUPacket->nPayLoad = errorInputGetSwitchData();
									pcuSendResponse(eInterface, pPCUPacket);
								}
								break;
								
							case ePCUCOMMAND_GET_TEMPERATURE:
								{
									pPCUPacket->nPayLoad = lm73GetDegreesC();
									pcuSendResponse(eInterface, pPCUPacket);
								}
								break;
								
							case ePCUCOMMAND_RESET_PCU:
								watchdogReboot();
								break;
							
							case ePCUCOMMAND_SET_FAN0_ON:
								ledDriverSetFan0(eLED_ON);
								printf("FAN0 ON[%X]\n",pPCUPacket->nPayLoad);
								break;

							case ePCUCOMMAND_SET_FAN0_OFF:
								ledDriverSetFan0(eLED_OFF);
								printf("FAN0 OFF[%X]\n",pPCUPacket->nPayLoad);
								break;
							
							case ePCUCOMMAND_SET_FAN1_ON:
								ledDriverSetFan1(eLED_ON);
								printf("FAN1 ON[%X]\n",pPCUPacket->nPayLoad);
								break;
							
							case ePCUCOMMAND_SET_FAN1_OFF:
								ledDriverSetFan1(eLED_OFF);
								printf("FAN1 OFF[%X]\n",pPCUPacket->nPayLoad);
								break;

							default:
								break;
					}

	}while(0);
}
